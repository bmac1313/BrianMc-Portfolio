{
  "hash": "5a0c11b9b24b0c550673acd5ce9a93b1",
  "result": {
    "markdown": "---\ntitle: \"Top 10 Starter EDA Functions() in R Studio\"\nauthor: \"Brian McNamara\"\ndate: \"2023-12-03\"\ncategories: [R, code, EDA, visualization]\nimage: \"image.jpg\"\n---\n\n\nHere, you can see common Exploratory Data Analysis functions used to understand a datasets. We will use the preloaded \"mtcars\" dataset that is already installed with R Studio.\n\nThe \"mtcars\" dataset is comprised of 32 automobile models for the year 1973 -1974 with charactersits such as fuel consumption, horsepower and much more (1974 US Motor Trend magazine).\n\n**Best Practices**\n\nIt is always best practice to load your libraries upfront, we will use ggplot2 for visualizations. The comment (# or hashtag) should be used to help document workflows and explain code in more detail\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#this is a comment\n\n#load ggplot2 library\nlibrary(ggplot2)\n```\n:::\n\n\n\\\nThe steps below will outline a walk through to better understand the mtcars dataset.\n\n1.  Using the *?* within R Studio will showcase details of the dataset for you. The question mark, *?*, can be used to inspect any function (or preloaded dataset) inside R Studio.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    #use the ? to examine the command, such as mtcard dataset in this example\n    ?mtcars\n    ```\n    \n    ::: {.cell-output .cell-output-stderr}\n    ```\n    starting httpd help server ... done\n    ```\n    :::\n    :::\n\n\n    ![](R1.png)\n\n2.  Load the data via the *data()* command. The mtcars dataset is now loaded within R and ready for EDA.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#load data\ndata(\"mtcars\")\n```\n:::\n\n\n3.  Examine the number of columns *ncol()* and rows *nrows()* of the dataset. This can help determine if the dataset will need to be subdivided (via the subset function) for further analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#rows and columns count\nnrow(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 32\n```\n:::\n\n```{.r .cell-code}\nncol(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11\n```\n:::\n:::\n\n\nWith 32 rows and 11 columns, we can see the dataset is relatively small and is ready for EDA.\\\n\n4.  Usee the *head()* command to view the first few rows\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    #first few rows\n    head(mtcars)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n                       mpg cyl disp  hp drat    wt  qsec vs am gear carb\n    Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n    Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n    Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n    Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n    Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n    Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n    ```\n    :::\n    :::\n\n\n    \\\n\n5.  While *head()* looks at the first few rows, ***tail()*** looks at the last. Take a look at the last few rows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#last few rows\ntail(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                mpg cyl  disp  hp drat    wt qsec vs am gear carb\nPorsche 914-2  26.0   4 120.3  91 4.43 2.140 16.7  0  1    5    2\nLotus Europa   30.4   4  95.1 113 3.77 1.513 16.9  1  1    5    2\nFord Pantera L 15.8   8 351.0 264 4.22 3.170 14.5  0  1    5    4\nFerrari Dino   19.7   6 145.0 175 3.62 2.770 15.5  0  1    5    6\nMaserati Bora  15.0   8 301.0 335 3.54 3.570 14.6  0  1    5    8\nVolvo 142E     21.4   4 121.0 109 4.11 2.780 18.6  1  1    4    2\n```\n:::\n:::\n\n\n\\\nNow that the overall dataset size has been examined we can dive into it and learn more about the variables.\n\n6.  To find the variable type for each use the *str()* function to list each class type (string, integer, double, factor etc)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#variable name, type, count and first few observations\nstr(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t32 obs. of  11 variables:\n $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\n```\n:::\n:::\n\n\n7.  To generate the summary statistics of each variable, use the *summary()* function to produce statistics such as Minimum, Maximum, Median, Mean and others.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#summary statistics of each variable by variable type\nsummary(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      mpg             cyl             disp             hp       \n Min.   :10.40   Min.   :4.000   Min.   : 71.1   Min.   : 52.0  \n 1st Qu.:15.43   1st Qu.:4.000   1st Qu.:120.8   1st Qu.: 96.5  \n Median :19.20   Median :6.000   Median :196.3   Median :123.0  \n Mean   :20.09   Mean   :6.188   Mean   :230.7   Mean   :146.7  \n 3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:326.0   3rd Qu.:180.0  \n Max.   :33.90   Max.   :8.000   Max.   :472.0   Max.   :335.0  \n      drat             wt             qsec             vs        \n Min.   :2.760   Min.   :1.513   Min.   :14.50   Min.   :0.0000  \n 1st Qu.:3.080   1st Qu.:2.581   1st Qu.:16.89   1st Qu.:0.0000  \n Median :3.695   Median :3.325   Median :17.71   Median :0.0000  \n Mean   :3.597   Mean   :3.217   Mean   :17.85   Mean   :0.4375  \n 3rd Qu.:3.920   3rd Qu.:3.610   3rd Qu.:18.90   3rd Qu.:1.0000  \n Max.   :4.930   Max.   :5.424   Max.   :22.90   Max.   :1.0000  \n       am              gear            carb      \n Min.   :0.0000   Min.   :3.000   Min.   :1.000  \n 1st Qu.:0.0000   1st Qu.:3.000   1st Qu.:2.000  \n Median :0.0000   Median :4.000   Median :2.000  \n Mean   :0.4062   Mean   :3.688   Mean   :2.812  \n 3rd Qu.:1.0000   3rd Qu.:4.000   3rd Qu.:4.000  \n Max.   :1.0000   Max.   :5.000   Max.   :8.000  \n```\n:::\n:::\n\n\n\\\n\n8.  To view relationships (correlation) between each variable, use the *ggcorrplot()* from the ggplot2 library. Pass the mtcars dataset through the correlation *cor()* generate the visualization.\n\n    Correlation is measured between +1.0 and -1.0 with positive values at 1 representing a perfect linear relationship and negative values at -1 representing a perfect negative linear relationship. A value of 0 means there is no relationship. **Essentially**, look for the bright red and blue squares to find the variables with the greatest correlation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#visualization to find most related variables\nggcorrplot::ggcorrplot(cor(mtcars))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nLooking at the graphic above, you can see wt (weight) and mpg (miles per gallon) have a high negative relationship. Let's use these two for the last couple steps...\\\n\n9.  A simple histogram *hist()* can help visualize the distribution of the data between the two variables, weight and mpg. Older cars did not have the best mpg!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#two histograms!\nhist(mtcars$mpg, main = \"Histogram of MPG\", xlab = \"Miles Per Gallon\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n\n```{.r .cell-code}\nhist(mtcars$wt, main = \"Histogram of weight\", xlab = \"Weight in 1k lbs\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-2.png){width=672}\n:::\n:::\n\n\n\\\n\n10. Using the *plot()* function we can create a scatter plot of the two variables, MPG and Weight.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mtcars$wt, mtcars$mpg, main = \"Scatter Plot of MPG vs Weight\", xlab = \"Weight (in 1k lbs)\", ylab = \"Miles Per Gallon\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nLooking at the graph we can see the correlation is negative as the data decreases in MPG as the Weight increases (remember, it was a blue square in the correlation matrix).\n\n11. **BONUS**! Let's add a trend line comparing the two variables. We will use the ggplot function to create a scatterplot and add a smoothed trend line.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mtcars, mapping = aes(x = mtcars$wt, y = mtcars$mpg)) +\n          geom_point() +\n          geom_smooth() +   \n          xlab(\"Weight in 1k lbs\") +\n          ylab(\"My Miles per Gallon (MPG)\") +\n          ggtitle(\"mtcars data Weight vs MPG\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n**That's it!** Thanks for reading and give EDA a try on your favorite dataset in R!\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}